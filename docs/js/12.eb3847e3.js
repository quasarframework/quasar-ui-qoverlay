(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[12],{"6e12":function(e,n,t){"use strict";t.r(n),n["default"]='<template>\n  <div class="q-pa-md row justify-around" style="max-width: 700px; width: 100%;">\n\n    <q-overlay :no-scroll="noScroll" v-model="model">\n      <template v-slot:body>\n        <div class="absolute fit row justify-center items-center">\n          <q-spinner v-if="model === true && waiting === true" color="yellow" size="3em"></q-spinner>\n          <q-btn v-if="model === true && waiting !== true" color="primary" label="Exit" @click="model = !model" />\n        </div>\n      </template>\n\n      <q-card :class="\'my-card \' + ($q.dark.isActive !== true ? \'bg-secondary text-white\' : \'\')" >\n        <q-card-section>\n          <div class="text-h5">QOverlay</div>\n          <div class="text-subtitle2">Put a standard overlay on full screen or over a component.</div>\n        </q-card-section>\n\n        <q-card-section>\n          <div class="text-h6">Fullscreen mode</div>\n          <div class="text-body2">For fullscreen overlay mode, the <i>q-overlay</i> tag can be placed anywhere in a template and should have no default slot used. The overlay will cover all scrollable area (try scrolling this page after entering Fullscreen mode). But, if the <strong>body</strong> slot is used, this will be available on the visible view port.</div>\n        </q-card-section>\n        <q-card-section>\n          <div class="text-h6">Component mode</div>\n          <div class="text-body2">For component overlay mode, the <i>q-overlay</i> tag is used to wrap a component. The overlay will cover the contained component.</div>\n        </q-card-section>\n\n        <q-separator dark />\n\n        <q-card-actions class="justify-around">\n          <q-checkbox v-model="noScroll" dark label="No scroll" />\n          <q-btn flat @click="model = !model">Component Overlay</q-btn>\n        </q-card-actions>\n      </q-card>\n    </q-overlay>\n\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      model: false,\n      noScroll: false,\n      waiting: false,\n      timerId: null\n    }\n  },\n\n  deforeDestroy () {\n    clearTimeout(this.timerId)\n  },\n\n  watch: {\n    model (val) {\n      clearTimeout(this.timerId)\n      if (val) {\n        this.waiting = true\n        this.timerId = setTimeout(() => {\n          this.waiting = false\n        }, 2000)\n      }\n      else {\n        this.waiting = false\n      }\n    }\n  }\n}\n<\/script>\n'}}]);